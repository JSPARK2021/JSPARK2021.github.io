---
layout: post
title:  "JAVA ArrayList 기초2"
---

# JAVA ArrayList 기초2

**java ArrayList 기초2**, 자바 ArrayList 기초 사용법2 입니다..

```java
package java_study;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;

public class List_study2 {

	public static void main(String[] args) {
		// 제네릭스(Generics란? 리스트옆에<>를 이용하여 사용할 객체의 타입을 지정해주는것,
		//객체의 타입을 미리 명시하여 객체의 형변환을 사용할 필요가 없게 해줌, 내가 사용하고 싶은 데이터 타입만 사용할수 있게 해줌.
		
		//사용법
		//ArrayList<String> pitches = new ArrayList<String>(); //제네릭스를 이용한 방법
		//ArrayList<String> pitches = new ArrayList<>();  // 선호되는 방식
		
		//제네릭스를 이용한 ArrayList 만들기
		ArrayList<String> pitches = new ArrayList<>();  // 제네릭스를 사용한 표현
        pitches.add("13");
        pitches.add("12");
        pitches.add("14");
        System.out.println(pitches);  // [13, 12, 14] 출력
		
        //데이터가 이미 존재하는 경우 ArrayList 만들기
        String[] data = {"138", "129", "142"};  // 이미 투구수 데이터 배열이 있다.
        ArrayList<String> pitches2 = new ArrayList<>(Arrays.asList(data));
        System.out.println(pitches2);  // [138, 129, 142] 출력
        
        //데이터가 이미 존재하는 경우 ArrayList 만들기2
        String[] data2 = {"1380", "1290", "1420"};  // 이미 투구수 데이터 배열이 있다.
        ArrayList<String> pitches3 = new ArrayList<>(Arrays.asList(data2));
        System.out.println(pitches3);  // [1380, 1290, 1420] 출력
        
        //ArrayList의 요소를 하나의 문자열로 만들기
        ArrayList<String> pitches4 = new ArrayList<>(Arrays.asList("1388", "1299", "1422"));
        String result = "";
        for (int i = 0; i < pitches4.size(); i++) {
            result += pitches4.get(i);
            result += ",";  // 콤마를 추가한다.
        }
        result = result.substring(0, result.length() - 1);  // 마지막 콤마는 제거한다.
        System.out.println(result);  // 1388,1299,1422 출력
        
        
        //ArrayList의 요소로 문자열 만들기. (String.join을 이용한 간단한 방법)
        ArrayList<String> pitches5 = new ArrayList<>(Arrays.asList("1138", "1129", "1142"));
        String result2 = String.join(",", pitches5);
        System.out.println(result2);  // 1138,1129,1142 출력
        
        
        
        //String.join은 문자열 배열에도 사용가능
        String[] pitches6 = new String[]{"1338", "1229", "1442"};
        String result3 = String.join(",", pitches6);
        System.out.println(result3);  // 1338,1229,1442 출력
        
        
        //ArrayList 정렬하기
        ArrayList<String> pitches7 = new ArrayList<>(Arrays.asList("13888", "12999", "14222"));
        pitches.sort(Comparator.naturalOrder());  // 오름차순으로 정렬
        //pitches.sort(Comparator.reverseOrder());  //내림차순으로 정렬
        System.out.println(pitches7);  // [12999, 13888, 14222] 출력
	}

}

```
